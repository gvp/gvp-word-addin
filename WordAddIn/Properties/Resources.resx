<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AcuteAccentButton_Label" xml:space="preserve">
    <value>Acute accent</value>
  </data>
  <data name="CandrabinduButton_Label" xml:space="preserve">
    <value>Candrabindu</value>
  </data>
  <data name="ClearOperationalFont_Label" xml:space="preserve">
    <value>Clear selected font</value>
  </data>
  <data name="ClearOperationalFont_Screentip" xml:space="preserve">
    <value>Clear previously selected font</value>
  </data>
  <data name="ClearOperationalFont_Supertip" xml:space="preserve">
    <value>This command clears the selection of previously used non-unicode font.</value>
  </data>
  <data name="ConvertToFont_Label" xml:space="preserve">
    <value>Convert to {0} font</value>
  </data>
  <data name="ConvertToOperationalFont_Label" xml:space="preserve">
    <value>Convert to a font</value>
  </data>
  <data name="ConvertToOperationalFont_Screentip" xml:space="preserve">
    <value>Convert to non-standard font with diacritics</value>
  </data>
  <data name="ConvertToOperationalFont_Supertip" xml:space="preserve">
    <value>Convert the text so that it would be displayed correctly in selected non-standard font with diacritics.

Currently the following non-standard fonts are supported to convert to.

Devanagari:
Not supported yet. Coming soon.

Roman:
Sca-series
Rama Garamond Plus
GVPalatino

Cyrillic:
ThamesM</value>
  </data>
  <data name="ConvertToUnicode_Label" xml:space="preserve">
    <value>Convert to Unicode</value>
  </data>
  <data name="ConvertToUnicode_Screentip" xml:space="preserve">
    <value>Convert to Unicode</value>
  </data>
  <data name="ConvertToUnicode_Supertip" xml:space="preserve">
    <value>Convert the text so that it would be displayed correctly in all standard Unicode fonts.

Currently the following non-standard fonts are supported to convert from.

Devanagari:
AARitu
AARituPlus2
Kalakar
SDW-series

Roman:
Amita Times
Balaram
DVRoman-TTSurekh
GVPalatino
Rama Garamond Plus
Sca-series
SD1-TTSurekh

Cyrillic:
Amita Times Cyr
ThamesM
ThamesSanskrit</value>
  </data>
  <data name="CyrillicFontsSeparator_Title" xml:space="preserve">
    <value>Cyrillic fonts</value>
  </data>
  <data name="Devanagari2Latin_Label" xml:space="preserve">
    <value>देवनागरी → Devanāgarī</value>
  </data>
  <data name="Devanagari2Latin_Screentip" xml:space="preserve">
    <value>Devanagari into Roman transliteration</value>
  </data>
  <data name="Devanagari2Latin_Supertip" xml:space="preserve">
    <value>Transliterate Devanagari script into Roman script.</value>
  </data>
  <data name="DevanagariFontsSeparator_Title" xml:space="preserve">
    <value>Devanagari fonts</value>
  </data>
  <data name="DiacriticsButtons_Supertip" xml:space="preserve">
    <value>Append this diacritical mark to the previous symbol.</value>
  </data>
  <data name="DiacriticsGallery_Label" xml:space="preserve">
    <value>Insert diacritical mark</value>
  </data>
  <data name="DotAboveButton_Label" xml:space="preserve">
    <value>Dot above</value>
  </data>
  <data name="DotBelowButton_Label" xml:space="preserve">
    <value>Dot below</value>
  </data>
  <data name="FontTransformationUndoRecord" xml:space="preserve">
    <value>Font transformation</value>
  </data>
  <data name="GroupDiacritics_Label" xml:space="preserve">
    <value>Diacritical marks</value>
  </data>
  <data name="GroupFontConversion_Label" xml:space="preserve">
    <value>Font conversion</value>
  </data>
  <data name="Latin2Cyrillic_Label" xml:space="preserve">
    <value>Devanāgarī → Девана̄гарӣ</value>
  </data>
  <data name="Latin2Cyrillic_Screentip" xml:space="preserve">
    <value>Roman into Cyrillic transliteration</value>
  </data>
  <data name="Latin2Cyrillic_Supertip" xml:space="preserve">
    <value>Transliterate Roman script into Cyrillic script.</value>
  </data>
  <data name="MacronBelowButton_Label" xml:space="preserve">
    <value>Macron below</value>
  </data>
  <data name="MacronButton_Label" xml:space="preserve">
    <value>Macron</value>
  </data>
  <data name="OperationalFontSeparator_Title" xml:space="preserve">
    <value>Operational font</value>
  </data>
  <data name="RomanFontsSeparator_Title" xml:space="preserve">
    <value>Roman fonts</value>
  </data>
  <data name="ScaSeriesMenu_Label" xml:space="preserve">
    <value>Convert to Sca-fonts</value>
  </data>
  <data name="TabGVP_Label" xml:space="preserve">
    <value>GVP</value>
  </data>
  <data name="TildeButton_Label" xml:space="preserve">
    <value>Tilde</value>
  </data>
  <data name="TransliterationGroup_Label" xml:space="preserve">
    <value>Transliteration</value>
  </data>
</root>